input:
    input.go: |
        package slices_arrays

        // goverter:converter
        type Converter interface {
           ConvertHouse(source DBHouseNames) APIHouseNames
        }

        type DBHouseNames struct {
           Names *[]string
        }

        type APIHouseNames struct {
           Names *[]string
        }
success: |
    // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

    package generated

    import execution "github.com/jmattheis/goverter/execution"

    type ConverterImpl struct{}

    func (c *ConverterImpl) ConvertHouse(source execution.DBHouseNames) execution.APIHouseNames {
    	var slices_arraysAPIHouseNames execution.APIHouseNames
    	var pStringList *[]string
    	if source.Names != nil {
    		stringListSourceDeref := *source.Names
    		var stringList []string
    		if stringListSourceDeref != nil {
    			stringList = make([]string, len(stringListSourceDeref), len(stringListSourceDeref))
    		}
    		for i := 0; i < len(stringListSourceDeref); i++ {
    			stringList[i] = stringListSourceDeref[i]
    		}
    		pStringList = &stringList
    	}
    	slices_arraysAPIHouseNames.Names = pStringList
    	return slices_arraysAPIHouseNames
    }
