input:
    input.go: |
        package structs

        import (
            "database/sql"
        )

        // goverter:converter
        // goverter:extend Conv
        type Converter interface {
            ConvertHouse(source DBHouseNames) APIHouseNames
        }
        func Conv(value *string) sql.NullString {
            if value == nil {
                return sql.NullString{}
            }
            return sql.NullString{Valid: true, String: *value}
        }

        type X struct { X string }
        type Y struct { Y string }

        type DBHouseNames struct {
            House struct {
                X
                Y
                Name *string
                Inner struct {Z string}
            }
        }

        type APIHouseNames struct {
            House struct {
                X
                Y `json:"abc"`
                Name sql.NullString ` json:"lmao"   json:"other" xml:"abc"`
                Inner struct {Z string}
            }
        }
success: |
    // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

    package generated

    import (
    	"database/sql"
    	execution "github.com/jmattheis/goverter/execution"
    )

    type ConverterImpl struct{}

    func (c *ConverterImpl) ConvertHouse(source execution.DBHouseNames) execution.APIHouseNames {
    	var structsAPIHouseNames execution.APIHouseNames
    	var anonStruct struct {
    		execution.X
    		execution.Y `json:"abc"`
    		Name        sql.NullString ` json:"lmao"   json:"other" xml:"abc"`
    		Inner       struct {
    			Z string
    		}
    	}
    	anonStruct.X = c.structsXToStructsX(source.House.X)
    	anonStruct.Y = c.structsYToStructsY(source.House.Y)
    	anonStruct.Name = execution.Conv(source.House.Name)
    	var anonStruct2 struct {
    		Z string
    	}
    	anonStruct2.Z = source.House.Inner.Z
    	anonStruct.Inner = anonStruct2
    	structsAPIHouseNames.House = anonStruct
    	return structsAPIHouseNames
    }
    func (c *ConverterImpl) structsXToStructsX(source execution.X) execution.X {
    	var structsX execution.X
    	structsX.X = source.X
    	return structsX
    }
    func (c *ConverterImpl) structsYToStructsY(source execution.Y) execution.Y {
    	var structsY execution.Y
    	structsY.Y = source.Y
    	return structsY
    }
